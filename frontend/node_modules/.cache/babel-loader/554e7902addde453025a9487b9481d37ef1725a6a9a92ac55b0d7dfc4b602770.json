{"ast":null,"code":"// import React, { useState } from 'react';\n\n// const FileUpload = () => {\n//   const [file, setFile] = useState(null); // Store selected file\n//   const [message, setMessage] = useState(''); // Store server response message\n\n//   // Function to handle file selection\n//   const handleFileChange = (e) => {\n//     setFile(e.target.files[0]);\n//   };\n\n//   // Function to upload the file to the backend\n//   const handleFileUpload = async () => {\n//     if (!file) {\n//       setMessage('Please select a file first.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('file', file);\n\n//     try {\n//       const response = await fetch('http://localhost:3000/upload', {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const data = await response.json();\n//       if (response.ok) {\n//         setMessage('File uploaded successfully!');\n//       } else {\n//         setMessage(data.message || 'Error uploading the file');\n//       }\n//     } catch (error) {\n//       setMessage('Error uploading file');\n//       console.error(error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"flex justify-center items-center h-screen bg-gray-100\">\n//       <div className=\"w-96 p-6 bg-white rounded-lg shadow-lg\">\n//         <h1 className=\"text-xl font-semibold mb-4 text-center\">Upload Your Resume</h1>\n\n//         {/* File input */}\n//         <input\n//           type=\"file\"\n//           onChange={handleFileChange}\n//           accept=\".pdf\"\n//           className=\"block w-full p-2 mb-4 border border-gray-300 rounded text-sm\"\n//         />\n\n//         <button\n//           onClick={handleFileUpload}\n//           className=\"w-full p-2 bg-blue-500 text-white rounded font-semibold hover:bg-blue-600 transition\"\n//         >\n//           Upload Resume\n//         </button>\n\n//         {message && <p className=\"mt-4 text-center text-gray-700\">{message}</p>}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default FileUpload;\n\n// import React, { useState } from 'react';\n\n// const FileUpload = () => {\n//   const [file, setFile] = useState(null); \n//   const [message, setMessage] = useState(''); \n//   const [parsedData, setParsedData] = useState(null); \n\n//   const handleFileChange = (e) => {\n//     setFile(e.target.files[0]);\n//   };\n\n//   const handleFileUpload = async () => {\n//     if (!file) {\n//       setMessage('Please select a file first.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('file', file);\n//       // Log formData to check if file is being appended\n//   console.log(...formData); // This will log the FormData contents\n\n//     try {\n//       const response = await fetch('http://localhost:5000/upload', {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const data = await response.json();\n//       if (response.ok) {\n//         setMessage('File uploaded and processed successfully!');\n//         setParsedData(data); \n//       } else {\n//         setMessage(data.message || 'Error uploading the file');\n//       }\n//     } catch (error) {\n//       setMessage('Error uploading file');\n//       console.error(error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"flex justify-center items-center h-screen bg-gray-100\">\n//       <div className=\"w-96 p-6 bg-white rounded-lg shadow-lg\">\n//         <h1 className=\"text-xl font-semibold mb-4 text-center\">Upload Your Resume</h1>\n\n//         <input\n//           type=\"file\"\n//           onChange={handleFileChange}\n//           accept=\".pdf,.docx,.jpg,.png\"\n//           className=\"block w-full p-2 mb-4 border border-gray-300 rounded text-sm\"\n//         />\n\n//         <button\n//           onClick={handleFileUpload}\n//           className=\"w-full p-2 bg-blue-500 text-white rounded font-semibold hover:bg-blue-600 transition\"\n//         >\n//           Upload Resume\n//         </button>\n\n//         {message && <p className=\"mt-4 text-center text-gray-700\">{message}</p>}\n\n//         {/* Display parsed data */}\n//         {parsedData && (\n//           <div className=\"mt-4\">\n//             <h2 className=\"text-lg font-semibold\">Parsed tururuur Data</h2>\n//             <pre className=\"text-sm\">{JSON.stringify(parsedData, null, 2)}</pre>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default FileUpload;\n\nimport express from 'express';\nimport fs from 'fs';\nimport path from 'path';\nimport { getDocument } from 'pdfjs-dist';\nimport compromise from 'compromise'; // Correct import\nimport cors from 'cors'; // Import CORS\nimport multer from 'multer'; // Import multer for file uploads\n\nconst app = express();\nconst port = 5000;\n\n// Enable CORS for all origins (allow frontend on port 3000)\napp.use(cors());\n\n// Setup multer storage configuration\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads'); // Define the 'uploads' folder for storing files\n  },\n  filename: (req, file, cb) => {\n    cb(null, file.originalname); // Save the file with the original name\n  }\n});\n\n// Initialize multer with storage configuration\nconst upload = multer({\n  storage\n});\n\n// Middleware to parse form data (for file uploads)\napp.use(express.urlencoded({\n  extended: true\n}));\napp.use(express.json());\napp.use(express.static('uploads'));\n\n// API endpoint for file upload\napp.post('/upload', upload.single('file'), (req, res) => {\n  if (!req.file) {\n    return res.status(400).send({\n      message: 'No file uploaded'\n    });\n  }\n  const filePath = path.join(__dirname, 'uploads', req.file.filename);\n\n  // Extract text and parse data after file is uploaded\n  extractText(filePath).then(extractedText => {\n    const parsedData = parseResumeData(extractedText);\n    const outputPath = path.join(__dirname, 'uploads', `${req.file.filename}.txt`);\n\n    // Save parsed data to a .txt file\n    fs.writeFileSync(outputPath, parsedData);\n    res.send({\n      message: 'File uploaded and data parsed',\n      filePath: outputPath\n    });\n  }).catch(error => {\n    console.error('Error extracting text:', error);\n    res.status(500).send({\n      message: 'Error processing the file'\n    });\n  });\n});\n\n// Function to extract text from the PDF file\nasync function extractText(filePath) {\n  const loadingTask = getDocument(filePath);\n  const pdf = await loadingTask.promise;\n  let text = '';\n  for (let i = 1; i <= pdf.numPages; i++) {\n    const page = await pdf.getPage(i);\n    const textContent = await page.getTextContent();\n    text += textContent.items.map(item => item.str).join(' ') + '\\n';\n  }\n  return text;\n}\n\n// Function to parse the extracted text (basic NLP)\nfunction parseResumeData(text) {\n  var _text$match, _text$match2;\n  const doc = compromise(text); // Use the default export\n\n  const name = doc.match('#Person').text();\n  const email = (_text$match = text.match(/[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/)) === null || _text$match === void 0 ? void 0 : _text$match[0];\n  const phone = (_text$match2 = text.match(/(\\+?[1-9]{1,2})?(\\d{10})/)) === null || _text$match2 === void 0 ? void 0 : _text$match2[0];\n  const skills = extractSkills(text);\n  return `\n    Name: ${name}\n    Email: ${email || 'Not found'}\n    Phone: ${phone || 'Not found'}\n    Skills: ${skills.join(', ') || 'Not found'}\n  `;\n}\n\n// Example skills extraction using simple keyword matching\nfunction extractSkills(text) {\n  const skillKeywords = ['JavaScript', 'Python', 'Java', 'C++', 'Node.js', 'React', 'SQL'];\n  const skillsFound = skillKeywords.filter(skill => text.includes(skill));\n  return skillsFound;\n}\napp.listen(port, () => {\n  console.log(`Server is running on http://localhost:${port}`);\n});","map":{"version":3,"names":["express","fs","path","getDocument","compromise","cors","multer","app","port","use","storage","diskStorage","destination","req","file","cb","filename","originalname","upload","urlencoded","extended","json","static","post","single","res","status","send","message","filePath","join","__dirname","extractText","then","extractedText","parsedData","parseResumeData","outputPath","writeFileSync","catch","error","console","loadingTask","pdf","promise","text","i","numPages","page","getPage","textContent","getTextContent","items","map","item","str","_text$match","_text$match2","doc","name","match","email","phone","skills","extractSkills","skillKeywords","skillsFound","filter","skill","includes","listen","log"],"sources":["C:/Cv/frontend/src/Components/FileUpload.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n\r\n// const FileUpload = () => {\r\n//   const [file, setFile] = useState(null); // Store selected file\r\n//   const [message, setMessage] = useState(''); // Store server response message\r\n\r\n//   // Function to handle file selection\r\n//   const handleFileChange = (e) => {\r\n//     setFile(e.target.files[0]);\r\n//   };\r\n\r\n//   // Function to upload the file to the backend\r\n//   const handleFileUpload = async () => {\r\n//     if (!file) {\r\n//       setMessage('Please select a file first.');\r\n//       return;\r\n//     }\r\n\r\n//     const formData = new FormData();\r\n//     formData.append('file', file);\r\n\r\n//     try {\r\n//       const response = await fetch('http://localhost:3000/upload', {\r\n//         method: 'POST',\r\n//         body: formData,\r\n//       });\r\n\r\n//       const data = await response.json();\r\n//       if (response.ok) {\r\n//         setMessage('File uploaded successfully!');\r\n//       } else {\r\n//         setMessage(data.message || 'Error uploading the file');\r\n//       }\r\n//     } catch (error) {\r\n//       setMessage('Error uploading file');\r\n//       console.error(error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"flex justify-center items-center h-screen bg-gray-100\">\r\n//       <div className=\"w-96 p-6 bg-white rounded-lg shadow-lg\">\r\n//         <h1 className=\"text-xl font-semibold mb-4 text-center\">Upload Your Resume</h1>\r\n\r\n//         {/* File input */}\r\n//         <input\r\n//           type=\"file\"\r\n//           onChange={handleFileChange}\r\n//           accept=\".pdf\"\r\n//           className=\"block w-full p-2 mb-4 border border-gray-300 rounded text-sm\"\r\n//         />\r\n\r\n//         <button\r\n//           onClick={handleFileUpload}\r\n//           className=\"w-full p-2 bg-blue-500 text-white rounded font-semibold hover:bg-blue-600 transition\"\r\n//         >\r\n//           Upload Resume\r\n//         </button>\r\n\r\n//         {message && <p className=\"mt-4 text-center text-gray-700\">{message}</p>}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default FileUpload;\r\n\r\n\r\n// import React, { useState } from 'react';\r\n\r\n// const FileUpload = () => {\r\n//   const [file, setFile] = useState(null); \r\n//   const [message, setMessage] = useState(''); \r\n//   const [parsedData, setParsedData] = useState(null); \r\n\r\n//   const handleFileChange = (e) => {\r\n//     setFile(e.target.files[0]);\r\n//   };\r\n\r\n//   const handleFileUpload = async () => {\r\n//     if (!file) {\r\n//       setMessage('Please select a file first.');\r\n//       return;\r\n//     }\r\n\r\n//     const formData = new FormData();\r\n//     formData.append('file', file);\r\n//       // Log formData to check if file is being appended\r\n//   console.log(...formData); // This will log the FormData contents\r\n\r\n//     try {\r\n//       const response = await fetch('http://localhost:5000/upload', {\r\n//         method: 'POST',\r\n//         body: formData,\r\n//       });\r\n\r\n//       const data = await response.json();\r\n//       if (response.ok) {\r\n//         setMessage('File uploaded and processed successfully!');\r\n//         setParsedData(data); \r\n//       } else {\r\n//         setMessage(data.message || 'Error uploading the file');\r\n//       }\r\n//     } catch (error) {\r\n//       setMessage('Error uploading file');\r\n//       console.error(error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"flex justify-center items-center h-screen bg-gray-100\">\r\n//       <div className=\"w-96 p-6 bg-white rounded-lg shadow-lg\">\r\n//         <h1 className=\"text-xl font-semibold mb-4 text-center\">Upload Your Resume</h1>\r\n\r\n//         <input\r\n//           type=\"file\"\r\n//           onChange={handleFileChange}\r\n//           accept=\".pdf,.docx,.jpg,.png\"\r\n//           className=\"block w-full p-2 mb-4 border border-gray-300 rounded text-sm\"\r\n//         />\r\n\r\n//         <button\r\n//           onClick={handleFileUpload}\r\n//           className=\"w-full p-2 bg-blue-500 text-white rounded font-semibold hover:bg-blue-600 transition\"\r\n//         >\r\n//           Upload Resume\r\n//         </button>\r\n\r\n//         {message && <p className=\"mt-4 text-center text-gray-700\">{message}</p>}\r\n\r\n//         {/* Display parsed data */}\r\n//         {parsedData && (\r\n//           <div className=\"mt-4\">\r\n//             <h2 className=\"text-lg font-semibold\">Parsed tururuur Data</h2>\r\n//             <pre className=\"text-sm\">{JSON.stringify(parsedData, null, 2)}</pre>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default FileUpload;\r\n\r\n\r\n\r\nimport express from 'express';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport { getDocument } from 'pdfjs-dist';\r\nimport compromise from 'compromise'; // Correct import\r\nimport cors from 'cors'; // Import CORS\r\nimport multer from 'multer'; // Import multer for file uploads\r\n\r\nconst app = express();\r\nconst port = 5000;\r\n\r\n// Enable CORS for all origins (allow frontend on port 3000)\r\napp.use(cors());\r\n\r\n// Setup multer storage configuration\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null, 'uploads'); // Define the 'uploads' folder for storing files\r\n  },\r\n  filename: (req, file, cb) => {\r\n    cb(null, file.originalname); // Save the file with the original name\r\n  },\r\n});\r\n\r\n// Initialize multer with storage configuration\r\nconst upload = multer({ storage });\r\n\r\n// Middleware to parse form data (for file uploads)\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(express.json());\r\napp.use(express.static('uploads'));\r\n\r\n// API endpoint for file upload\r\napp.post('/upload', upload.single('file'), (req, res) => {\r\n  if (!req.file) {\r\n    return res.status(400).send({ message: 'No file uploaded' });\r\n  }\r\n\r\n  const filePath = path.join(__dirname, 'uploads', req.file.filename);\r\n\r\n  // Extract text and parse data after file is uploaded\r\n  extractText(filePath)\r\n    .then((extractedText) => {\r\n      const parsedData = parseResumeData(extractedText);\r\n      const outputPath = path.join(__dirname, 'uploads', `${req.file.filename}.txt`);\r\n\r\n      // Save parsed data to a .txt file\r\n      fs.writeFileSync(outputPath, parsedData);\r\n      res.send({ message: 'File uploaded and data parsed', filePath: outputPath });\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error extracting text:', error);\r\n      res.status(500).send({ message: 'Error processing the file' });\r\n    });\r\n});\r\n\r\n// Function to extract text from the PDF file\r\nasync function extractText(filePath) {\r\n  const loadingTask = getDocument(filePath);\r\n  const pdf = await loadingTask.promise;\r\n  let text = '';\r\n\r\n  for (let i = 1; i <= pdf.numPages; i++) {\r\n    const page = await pdf.getPage(i);\r\n    const textContent = await page.getTextContent();\r\n    text += textContent.items.map(item => item.str).join(' ') + '\\n';\r\n  }\r\n\r\n  return text;\r\n}\r\n\r\n// Function to parse the extracted text (basic NLP)\r\nfunction parseResumeData(text) {\r\n  const doc = compromise(text); // Use the default export\r\n\r\n  const name = doc.match('#Person').text();\r\n  const email = text.match(/[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/)?.[0];\r\n  const phone = text.match(/(\\+?[1-9]{1,2})?(\\d{10})/)?.[0];\r\n  const skills = extractSkills(text);\r\n\r\n  return `\r\n    Name: ${name}\r\n    Email: ${email || 'Not found'}\r\n    Phone: ${phone || 'Not found'}\r\n    Skills: ${skills.join(', ') || 'Not found'}\r\n  `;\r\n}\r\n\r\n// Example skills extraction using simple keyword matching\r\nfunction extractSkills(text) {\r\n  const skillKeywords = ['JavaScript', 'Python', 'Java', 'C++', 'Node.js', 'React', 'SQL'];\r\n  const skillsFound = skillKeywords.filter((skill) => text.includes(skill));\r\n  return skillsFound;\r\n}\r\n\r\napp.listen(port, () => {\r\n  console.log(`Server is running on http://localhost:${port}`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}