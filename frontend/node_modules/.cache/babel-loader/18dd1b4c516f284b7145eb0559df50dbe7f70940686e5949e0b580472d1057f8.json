{"ast":null,"code":"var _jsxFileName = \"C:\\\\Cv\\\\frontend\\\\src\\\\Components\\\\FileUpload.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n\n// const FileUpload = () => {\n//   const [file, setFile] = useState(null);  // Store selected file\n//   const [message, setMessage] = useState('');  // Store server response message\n//   const [filePath, setFilePath] = useState('');  // Store the path of the saved .txt file\n\n//   // Function to handle file selection\n//   const handleFileChange = (e) => {\n//     setFile(e.target.files[0]);\n//   };\n\n//   // Function to upload the file to the backend\n//   const handleFileUpload = async () => {\n//     if (!file) {\n//       setMessage('Please select a file first.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('file', file);  \n\n//     try {\n//       const response = await fetch('http://localhost:3000/upload', {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const data = await response.json();  // Parse JSON response\n//       if (response.ok) {\n//         setMessage(data.message);  // Show success message\n//         setFilePath(data.textFilePath);  // Set the path to the saved text file\n//       } else {\n//         setMessage(data.message || 'Error uploading file');\n//       }\n//     } catch (error) {\n//       setMessage('Error uploading file');\n//       console.error(error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"p-4 max-w-md mx-auto bg-white rounded-lg shadow-lg\">\n//       <h1 className=\"text-xl font-semibold mb-4 text-center\">Upload Your Resume</h1>\n\n//       {/* File input */}\n//       <input\n//         type=\"file\"\n//         onChange={handleFileChange}\n//         accept=\".pdf\"\n//         className=\"block w-full p-2 mb-4 border border-gray-300 rounded\"\n//       />\n\n//       {/* Upload button */}\n//       <button\n//         onClick={handleFileUpload}\n//         className=\"w-full p-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n//       >\n//         Upload Resume\n//       </button>\n\n//       {/* Display message */}\n//       {message && <p className=\"mt-4 text-center text-gray-700\">{message}</p>}\n\n//       {/* If file was processed, show link to the saved .txt file */}\n//       {filePath && (\n//         <p className=\"mt-2 text-center text-gray-700\">\n//           File processed successfully.{' '}\n//           <a\n//             href={`http://localhost:3000/${filePath}`}\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//             className=\"text-blue-500\"\n//           >\n//             Download the extracted text file\n//           </a>\n//         </p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default FileUpload;\n\n// import React, { useState } from 'react';\n// import { useDropzone } from 'react-dropzone';\n\n// const FileUpload = () => {\n//   const [parsedData, setParsedData] = useState(null);\n//   const [loading, setLoading] = useState(false);\n\n//   const onDrop = async (acceptedFiles) => {\n//     const formData = new FormData();\n//     formData.append('file', acceptedFiles[0]);\n\n//     try {\n//       setLoading(true);\n//       const response = await fetch('http://localhost:5000/upload', {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       if (!response.ok) {\n//         throw new Error('Failed to upload file.');\n//       }\n\n//       const result = await response.json();\n//       setParsedData(result.data);\n//     } catch (error) {\n//       console.error('Error uploading file:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const { getRootProps, getInputProps } = useDropzone({ onDrop });\n\n//   return (\n//     <div style={{ textAlign: 'center', marginTop: '50px' }}>\n//       <h1>CV Parser</h1>\n//       <div\n//         {...getRootProps()}\n//         style={{\n//           border: '2px dashed #007bff',\n//           padding: '20px',\n//           width: '300px',\n//           margin: 'auto',\n//           cursor: 'pointer',\n//         }}\n//       >\n//         <input {...getInputProps()} />\n//         <p>Drag & drop your resume here, or click to select a file</p>\n//       </div>\n//       {loading && <p>Processing...</p>}\n//       {parsedData && (\n//         <div style={{ marginTop: '20px', textAlign: 'left' }}>\n//           <h2>Extracted Information:</h2>\n//           <pre>{JSON.stringify(parsedData, null, 2)}</pre>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default FileUpload;\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = () => {\n  _s();\n  const [file, setFile] = useState(null); // Store selected file\n  const [message, setMessage] = useState(''); // Store server response message\n\n  // Function to handle file selection\n  const handleFileChange = e => {\n    setFile(e.target.files[0]);\n  };\n\n  // Function to upload the file to the backend\n  const handleFileUpload = async () => {\n    if (!file) {\n      setMessage('Please select a file first.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', file);\n    try {\n      const response = await fetch('http://localhost:3000/upload', {\n        method: 'POST',\n        body: formData\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setMessage('File uploaded successfully!');\n      } else {\n        setMessage(data.message || 'Error uploading file');\n      }\n    } catch (error) {\n      setMessage('Error uploading file');\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center items-center h-screen bg-gray-100\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-96 p-6 bg-white rounded-lg shadow-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-xl font-semibold mb-4 text-center\",\n        children: \"Upload Your Resume\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange,\n        accept: \".pdf\",\n        className: \"block w-full p-2 mb-4 border border-gray-300 rounded text-sm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFileUpload,\n        className: \"w-full p-2 bg-blue-500 text-white rounded font-semibold hover:bg-blue-600 transition\",\n        children: \"Upload Resume\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-4 text-center text-gray-700\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"yUNOnQxWjnYufcbQnTW1CT0xGVo=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","FileUpload","_s","file","setFile","message","setMessage","handleFileChange","e","target","files","handleFileUpload","formData","FormData","append","response","fetch","method","body","data","json","ok","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","accept","onClick","_c","$RefreshReg$"],"sources":["C:/Cv/frontend/src/Components/FileUpload.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n\r\n// const FileUpload = () => {\r\n//   const [file, setFile] = useState(null);  // Store selected file\r\n//   const [message, setMessage] = useState('');  // Store server response message\r\n//   const [filePath, setFilePath] = useState('');  // Store the path of the saved .txt file\r\n\r\n//   // Function to handle file selection\r\n//   const handleFileChange = (e) => {\r\n//     setFile(e.target.files[0]);\r\n//   };\r\n\r\n//   // Function to upload the file to the backend\r\n//   const handleFileUpload = async () => {\r\n//     if (!file) {\r\n//       setMessage('Please select a file first.');\r\n//       return;\r\n//     }\r\n\r\n//     const formData = new FormData();\r\n//     formData.append('file', file);  \r\n\r\n//     try {\r\n//       const response = await fetch('http://localhost:3000/upload', {\r\n//         method: 'POST',\r\n//         body: formData,\r\n//       });\r\n\r\n//       const data = await response.json();  // Parse JSON response\r\n//       if (response.ok) {\r\n//         setMessage(data.message);  // Show success message\r\n//         setFilePath(data.textFilePath);  // Set the path to the saved text file\r\n//       } else {\r\n//         setMessage(data.message || 'Error uploading file');\r\n//       }\r\n//     } catch (error) {\r\n//       setMessage('Error uploading file');\r\n//       console.error(error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"p-4 max-w-md mx-auto bg-white rounded-lg shadow-lg\">\r\n//       <h1 className=\"text-xl font-semibold mb-4 text-center\">Upload Your Resume</h1>\r\n\r\n//       {/* File input */}\r\n//       <input\r\n//         type=\"file\"\r\n//         onChange={handleFileChange}\r\n//         accept=\".pdf\"\r\n//         className=\"block w-full p-2 mb-4 border border-gray-300 rounded\"\r\n//       />\r\n      \r\n//       {/* Upload button */}\r\n//       <button\r\n//         onClick={handleFileUpload}\r\n//         className=\"w-full p-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\r\n//       >\r\n//         Upload Resume\r\n//       </button>\r\n\r\n//       {/* Display message */}\r\n//       {message && <p className=\"mt-4 text-center text-gray-700\">{message}</p>}\r\n\r\n//       {/* If file was processed, show link to the saved .txt file */}\r\n//       {filePath && (\r\n//         <p className=\"mt-2 text-center text-gray-700\">\r\n//           File processed successfully.{' '}\r\n//           <a\r\n//             href={`http://localhost:3000/${filePath}`}\r\n//             target=\"_blank\"\r\n//             rel=\"noopener noreferrer\"\r\n//             className=\"text-blue-500\"\r\n//           >\r\n//             Download the extracted text file\r\n//           </a>\r\n//         </p>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default FileUpload;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import { useDropzone } from 'react-dropzone';\r\n\r\n// const FileUpload = () => {\r\n//   const [parsedData, setParsedData] = useState(null);\r\n//   const [loading, setLoading] = useState(false);\r\n\r\n//   const onDrop = async (acceptedFiles) => {\r\n//     const formData = new FormData();\r\n//     formData.append('file', acceptedFiles[0]);\r\n\r\n//     try {\r\n//       setLoading(true);\r\n//       const response = await fetch('http://localhost:5000/upload', {\r\n//         method: 'POST',\r\n//         body: formData,\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error('Failed to upload file.');\r\n//       }\r\n\r\n//       const result = await response.json();\r\n//       setParsedData(result.data);\r\n//     } catch (error) {\r\n//       console.error('Error uploading file:', error);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const { getRootProps, getInputProps } = useDropzone({ onDrop });\r\n\r\n//   return (\r\n//     <div style={{ textAlign: 'center', marginTop: '50px' }}>\r\n//       <h1>CV Parser</h1>\r\n//       <div\r\n//         {...getRootProps()}\r\n//         style={{\r\n//           border: '2px dashed #007bff',\r\n//           padding: '20px',\r\n//           width: '300px',\r\n//           margin: 'auto',\r\n//           cursor: 'pointer',\r\n//         }}\r\n//       >\r\n//         <input {...getInputProps()} />\r\n//         <p>Drag & drop your resume here, or click to select a file</p>\r\n//       </div>\r\n//       {loading && <p>Processing...</p>}\r\n//       {parsedData && (\r\n//         <div style={{ marginTop: '20px', textAlign: 'left' }}>\r\n//           <h2>Extracted Information:</h2>\r\n//           <pre>{JSON.stringify(parsedData, null, 2)}</pre>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default FileUpload;\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState } from 'react';\r\n\r\nconst FileUpload = () => {\r\n  const [file, setFile] = useState(null); // Store selected file\r\n  const [message, setMessage] = useState(''); // Store server response message\r\n\r\n  // Function to handle file selection\r\n  const handleFileChange = (e) => {\r\n    setFile(e.target.files[0]);\r\n  };\r\n\r\n  // Function to upload the file to the backend\r\n  const handleFileUpload = async () => {\r\n    if (!file) {\r\n      setMessage('Please select a file first.');\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:3000/upload', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        setMessage('File uploaded successfully!');\r\n      } else {\r\n        setMessage(data.message || 'Error uploading file');\r\n      }\r\n    } catch (error) {\r\n      setMessage('Error uploading file');\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex justify-center items-center h-screen bg-gray-100\">\r\n      <div className=\"w-96 p-6 bg-white rounded-lg shadow-lg\">\r\n        <h1 className=\"text-xl font-semibold mb-4 text-center\">Upload Your Resume</h1>\r\n\r\n        {/* File input */}\r\n        <input\r\n          type=\"file\"\r\n          onChange={handleFileChange}\r\n          accept=\".pdf\"\r\n          className=\"block w-full p-2 mb-4 border border-gray-300 rounded text-sm\"\r\n        />\r\n\r\n        {/* Upload button */}\r\n        <button\r\n          onClick={handleFileUpload}\r\n          className=\"w-full p-2 bg-blue-500 text-white rounded font-semibold hover:bg-blue-600 transition\"\r\n        >\r\n          Upload Resume\r\n        </button>\r\n\r\n        {/* Display message */}\r\n        {message && <p className=\"mt-4 text-center text-gray-700\">{message}</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUpload;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE5C;EACA,MAAMS,gBAAgB,GAAIC,CAAC,IAAK;IAC9BJ,OAAO,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAC5B,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI,CAACR,IAAI,EAAE;MACTG,UAAU,CAAC,6BAA6B,CAAC;MACzC;IACF;IAEA,MAAMM,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEX,IAAI,CAAC;IAE7B,IAAI;MACF,MAAMY,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;QAC3DC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEN;MACR,CAAC,CAAC;MAEF,MAAMO,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,IAAIL,QAAQ,CAACM,EAAE,EAAE;QACff,UAAU,CAAC,6BAA6B,CAAC;MAC3C,CAAC,MAAM;QACLA,UAAU,CAACa,IAAI,CAACd,OAAO,IAAI,sBAAsB,CAAC;MACpD;IACF,CAAC,CAAC,OAAOiB,KAAK,EAAE;MACdhB,UAAU,CAAC,sBAAsB,CAAC;MAClCiB,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC;EAED,oBACEtB,OAAA;IAAKwB,SAAS,EAAC,uDAAuD;IAAAC,QAAA,eACpEzB,OAAA;MAAKwB,SAAS,EAAC,wCAAwC;MAAAC,QAAA,gBACrDzB,OAAA;QAAIwB,SAAS,EAAC,wCAAwC;QAAAC,QAAA,EAAC;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAG9E7B,OAAA;QACE8B,IAAI,EAAC,MAAM;QACXC,QAAQ,EAAExB,gBAAiB;QAC3ByB,MAAM,EAAC,MAAM;QACbR,SAAS,EAAC;MAA8D;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzE,CAAC,eAGF7B,OAAA;QACEiC,OAAO,EAAEtB,gBAAiB;QAC1Ba,SAAS,EAAC,sFAAsF;QAAAC,QAAA,EACjG;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EAGRxB,OAAO,iBAAIL,OAAA;QAAGwB,SAAS,EAAC,gCAAgC;QAAAC,QAAA,EAAEpB;MAAO;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC3B,EAAA,CA/DID,UAAU;AAAAiC,EAAA,GAAVjC,UAAU;AAiEhB,eAAeA,UAAU;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}