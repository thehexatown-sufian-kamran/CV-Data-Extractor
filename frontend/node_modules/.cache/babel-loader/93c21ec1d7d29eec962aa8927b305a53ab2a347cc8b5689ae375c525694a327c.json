{"ast":null,"code":"var _jsxFileName = \"C:\\\\Cv\\\\frontend\\\\src\\\\Components\\\\FileUpload.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n\n// const FileUpload = () => {\n//   const [file, setFile] = useState(null);  // Store selected file\n//   const [message, setMessage] = useState('');  // Store server response message\n//   const [filePath, setFilePath] = useState('');  // Store the path of the saved .txt file\n\n//   // Function to handle file selection\n//   const handleFileChange = (e) => {\n//     setFile(e.target.files[0]);\n//   };\n\n//   // Function to upload the file to the backend\n//   const handleFileUpload = async () => {\n//     if (!file) {\n//       setMessage('Please select a file first.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('file', file);  \n\n//     try {\n//       const response = await fetch('http://localhost:3000/upload', {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const data = await response.json();  // Parse JSON response\n//       if (response.ok) {\n//         setMessage(data.message);  // Show success message\n//         setFilePath(data.textFilePath);  // Set the path to the saved text file\n//       } else {\n//         setMessage(data.message || 'Error uploading file');\n//       }\n//     } catch (error) {\n//       setMessage('Error uploading file');\n//       console.error(error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"p-4 max-w-md mx-auto bg-white rounded-lg shadow-lg\">\n//       <h1 className=\"text-xl font-semibold mb-4 text-center\">Upload Your Resume</h1>\n\n//       {/* File input */}\n//       <input\n//         type=\"file\"\n//         onChange={handleFileChange}\n//         accept=\".pdf\"\n//         className=\"block w-full p-2 mb-4 border border-gray-300 rounded\"\n//       />\n\n//       {/* Upload button */}\n//       <button\n//         onClick={handleFileUpload}\n//         className=\"w-full p-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n//       >\n//         Upload Resume\n//       </button>\n\n//       {/* Display message */}\n//       {message && <p className=\"mt-4 text-center text-gray-700\">{message}</p>}\n\n//       {/* If file was processed, show link to the saved .txt file */}\n//       {filePath && (\n//         <p className=\"mt-2 text-center text-gray-700\">\n//           File processed successfully.{' '}\n//           <a\n//             href={`http://localhost:3000/${filePath}`}\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//             className=\"text-blue-500\"\n//           >\n//             Download the extracted text file\n//           </a>\n//         </p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default FileUpload;\n\nimport React, { useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = () => {\n  _s();\n  const [parsedData, setParsedData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const onDrop = async acceptedFiles => {\n    const formData = new FormData();\n    formData.append('file', acceptedFiles[0]);\n    try {\n      setLoading(true);\n      const response = await fetch('http://localhost:5000/upload', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error('Failed to upload file.');\n      }\n      const result = await response.json();\n      setParsedData(result.data);\n    } catch (error) {\n      console.error('Error uploading file:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      marginTop: '50px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"CV Parser\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ...getRootProps(),\n      style: {\n        border: '2px dashed #007bff',\n        padding: '20px',\n        width: '300px',\n        margin: 'auto',\n        cursor: 'pointer'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ...getInputProps()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Drag & drop your resume here, or click to select a file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Processing...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 19\n    }, this), parsedData && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px',\n        textAlign: 'left'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Extracted Information:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(parsedData, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"vlxf/ZnRqIXhbtp8pLFS4pKLshA=\", false, function () {\n  return [useDropzone];\n});\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","useDropzone","jsxDEV","_jsxDEV","FileUpload","_s","parsedData","setParsedData","loading","setLoading","onDrop","acceptedFiles","formData","FormData","append","response","fetch","method","body","ok","Error","result","json","data","error","console","getRootProps","getInputProps","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","border","padding","width","margin","cursor","JSON","stringify","_c","$RefreshReg$"],"sources":["C:/Cv/frontend/src/Components/FileUpload.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n\r\n// const FileUpload = () => {\r\n//   const [file, setFile] = useState(null);  // Store selected file\r\n//   const [message, setMessage] = useState('');  // Store server response message\r\n//   const [filePath, setFilePath] = useState('');  // Store the path of the saved .txt file\r\n\r\n//   // Function to handle file selection\r\n//   const handleFileChange = (e) => {\r\n//     setFile(e.target.files[0]);\r\n//   };\r\n\r\n//   // Function to upload the file to the backend\r\n//   const handleFileUpload = async () => {\r\n//     if (!file) {\r\n//       setMessage('Please select a file first.');\r\n//       return;\r\n//     }\r\n\r\n//     const formData = new FormData();\r\n//     formData.append('file', file);  \r\n\r\n//     try {\r\n//       const response = await fetch('http://localhost:3000/upload', {\r\n//         method: 'POST',\r\n//         body: formData,\r\n//       });\r\n\r\n//       const data = await response.json();  // Parse JSON response\r\n//       if (response.ok) {\r\n//         setMessage(data.message);  // Show success message\r\n//         setFilePath(data.textFilePath);  // Set the path to the saved text file\r\n//       } else {\r\n//         setMessage(data.message || 'Error uploading file');\r\n//       }\r\n//     } catch (error) {\r\n//       setMessage('Error uploading file');\r\n//       console.error(error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"p-4 max-w-md mx-auto bg-white rounded-lg shadow-lg\">\r\n//       <h1 className=\"text-xl font-semibold mb-4 text-center\">Upload Your Resume</h1>\r\n\r\n//       {/* File input */}\r\n//       <input\r\n//         type=\"file\"\r\n//         onChange={handleFileChange}\r\n//         accept=\".pdf\"\r\n//         className=\"block w-full p-2 mb-4 border border-gray-300 rounded\"\r\n//       />\r\n      \r\n//       {/* Upload button */}\r\n//       <button\r\n//         onClick={handleFileUpload}\r\n//         className=\"w-full p-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\r\n//       >\r\n//         Upload Resume\r\n//       </button>\r\n\r\n//       {/* Display message */}\r\n//       {message && <p className=\"mt-4 text-center text-gray-700\">{message}</p>}\r\n\r\n//       {/* If file was processed, show link to the saved .txt file */}\r\n//       {filePath && (\r\n//         <p className=\"mt-2 text-center text-gray-700\">\r\n//           File processed successfully.{' '}\r\n//           <a\r\n//             href={`http://localhost:3000/${filePath}`}\r\n//             target=\"_blank\"\r\n//             rel=\"noopener noreferrer\"\r\n//             className=\"text-blue-500\"\r\n//           >\r\n//             Download the extracted text file\r\n//           </a>\r\n//         </p>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default FileUpload;\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\n\r\nconst FileUpload = () => {\r\n  const [parsedData, setParsedData] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const onDrop = async (acceptedFiles) => {\r\n    const formData = new FormData();\r\n    formData.append('file', acceptedFiles[0]);\r\n\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch('http://localhost:5000/upload', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to upload file.');\r\n      }\r\n\r\n      const result = await response.json();\r\n      setParsedData(result.data);\r\n    } catch (error) {\r\n      console.error('Error uploading file:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const { getRootProps, getInputProps } = useDropzone({ onDrop });\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center', marginTop: '50px' }}>\r\n      <h1>CV Parser</h1>\r\n      <div\r\n        {...getRootProps()}\r\n        style={{\r\n          border: '2px dashed #007bff',\r\n          padding: '20px',\r\n          width: '300px',\r\n          margin: 'auto',\r\n          cursor: 'pointer',\r\n        }}\r\n      >\r\n        <input {...getInputProps()} />\r\n        <p>Drag & drop your resume here, or click to select a file</p>\r\n      </div>\r\n      {loading && <p>Processing...</p>}\r\n      {parsedData && (\r\n        <div style={{ marginTop: '20px', textAlign: 'left' }}>\r\n          <h2>Extracted Information:</h2>\r\n          <pre>{JSON.stringify(parsedData, null, 2)}</pre>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUpload;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}